#include <iostream>
#include <exception>
using namespace std;

class StackOverflowException : public exception {
public:
    const char* what() const noexcept override {
        return "Stack is full!";
    }
};

class StackUnderflowException : public exception {
public:
    const char* what() const noexcept override {
        return "Stack is empty!";
    }
};

template <typename T>
class Stack {
    T data[5];
    int top;
public:
    Stack() : top(-1) {}
    void push(T value) {
        if (top >= 4) throw StackOverflowException();
        data[++top] = value;
    }
    T pop() {
        if (top < 0) throw StackUnderflowException();
        return data[top--];
    }
};

int main() {
    Stack<int> s;
    try {
        for (int i = 0; i < 6; i++) s.push(i);
    } catch (const StackOverflowException& e) {
        cout << "Pushing to a full stack: StackOverflowException" << endl;
        cout << "- " << e.what() << endl;
    }

    try {
        for (int i = 0; i < 6; i++) s.pop();
    } catch (const StackUnderflowException& e) {
        cout << "Popping from an empty stack: StackUnderflowException" << endl;
        cout << "- " << e.what() << endl;
    }

    return 0;
}
