#include <iostream>
#include <exception>
#include <typeinfo>
#include <cmath>
using namespace std;

class NegativeNumberException : public exception {
public:
    const char* what() const noexcept override {
        return "Negative number not allowed.";
    }
};

class InvalidTypeException : public exception {
public:
    const char* what() const noexcept override {
        return "Invalid type provided.";
    }
};

template <typename T>
T sqrt(T num) {
    if (!(typeid(num) == typeid(int) || typeid(num) == typeid(double) || typeid(num) == typeid(float)))
        throw InvalidTypeException();
    if (num < 0)
        throw NegativeNumberException();
    return std::sqrt(static_cast<double>(num));
}

int main() {
    try {
        cout << "sqrt(-4): ";
        cout << sqrt(-4) << endl;
    } catch (const NegativeNumberException& e) {
        cout << "NegativeNumberException" << endl;
        cout << "- " << e.what() << endl;
    } catch (const InvalidTypeException& e) {
        cout << "InvalidTypeException" << endl;
        cout << "- " << e.what() << endl;
    }

    try {
        cout << "sqrt(\"hello\"): ";
        cout << sqrt(string("hello")) << endl;
    } catch (const NegativeNumberException& e) {
        cout << "NegativeNumberException" << endl;
        cout << "- " << e.what() << endl;
    } catch (const InvalidTypeException& e) {
        cout << "InvalidTypeException" << endl;
        cout << "- " << e.what() << endl;
    }

    return 0;
}
